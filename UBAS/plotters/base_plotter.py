"""
base_plotter.py
===============
Base class for plotters to subclass from
"""

import matplotlib.pyplot as plt
import os
from UBAS.plotters import PLOT_PATH
import seaborn as sns
import pandas as pd


class BasePlotter:
    """Base class for plotters"""
    def __init__(self, filename, plotting_interval=5, plots=["scatter_matrix", "pred_vs_actual"],
                 input_names=None, target_name=None, save_type="png", *args, **kwargs):
        """
        Class Initialization

        Parameters
        ----------
        filename : str
            The directory in which to save the plots generated by the associated sampler
        plotting_interval : int default=5
            Plots are generated and saved every `plotting_interval` iterations
        plots : List[str], Default=["scatter_matrix", "pred_vs_actual"]
            A list of strings corresponding to the plots that should be generated. Currently supported plots are:
            "scatter_matrix" and "pred_vs_actual"
        input_names : List[str] default=None
            The variable names of each input to be displayed on the plots. If None, x1, x2, ... are used.
        target_name : str
            The variable name of the output to be displayed on the plots. If None, x_{n+1} is used
        save_type : str default=".png"
            The figure file extension.
        *args
            Extra arguments to the plotter should be passed as keyword arguments
        **kwargs
            Extra keyword arguments to the plotting function
        """

        self.supported_graphs = {"scatter_matrix": BasePlotter.scatter_matrix,
                                 "pred_vs_actual": BasePlotter.pred_vs_actual}
        self.filename = filename
        self.plotting_interval = plotting_interval
        self.plots = plots
        self.input_names = input_names
        self.target_name = target_name
        self.save_type = save_type
        self.plotting_params = kwargs

    def generate_plots(self, iteration, x, x_new, y_preds, y_exact=None, y_new_exact=None):
        """
        The class responsible for generating the desired plots at each plotting interval

        Parameters
        ----------
        iteration : int
            The sampling iteration, used for the filename.
        x : NDArray
            The x-values to be plotted, including those just recently sampled
        x_new : NDArray
            The x-values sampled from the most recent sampling iteration
        y_preds : NDArray
            The predicted y-values associated with the given x-values
        y_exact : NDArray default=None
            The exact y-values that have been sampled, including those just recently sampled.
            If None, these are not included on the plots
        y_new_exact : NDArray default=None
            The exact y-values corresponding to the x-values sampled from the most recent sampling iteration.
            If None, these are not included on the plots.
        """
        for plot in self.plots:
            path = os.path.join(PLOT_PATH, self.filename, plot + f"_iter_{iteration}." + self.save_type)
            os.makedirs(os.path.join(PLOT_PATH, self.filename), exist_ok=True)

            # Convert to DataFrames
            x_df = pd.DataFrame(x)
            x_new_df = pd.DataFrame(x_new)
            if self.input_names is not None:
                x_df.columns = self.input_names
                x_new_df.columns = self.input_names

            y_preds_df = pd.DataFrame(y_preds)
            if self.target_name is not None:
                y_preds_df.columns = [self.target_name]

            if y_exact is not None:
                y_exact_df = pd.DataFrame(y_exact)
                if self.target_name is not None:
                    y_exact_df.columns = [self.target_name]

            else:
                y_exact_df = None

            if y_new_exact is not None:
                y_new_exact_df = pd.DataFrame(y_new_exact)
                if self.target_name is not None:
                    y_new_exact_df.columns = [self.target_name]
            else:
                y_new_exact_df = None

            plot = self.supported_graphs[plot](path, x_df, x_new_df, y_preds_df,
                                               y_exact_df, y_new_exact_df, **self.plotting_params)

    @staticmethod
    def scatter_matrix(path, x, x_new, y_preds_df, y_exact, y_new_exact, *args, **kwargs):
        """
        A plotting method to generate and save a scatter_matrix (also known as pairwise plot) using the seaborn
        interface.

        Parameters
        ----------
        path : str
            The path where to save the file, including the filename and file extension.
        x : DataFrame
            A DataFrame containing all the sampled input values
        x_new : DataFrame
            A DataFrame containing the most recently sampled input values
        y_preds_df : DataFrame
            A DataFrame containing the predicted y-values for all the sampled input values
        y_exact : Union(DataFrame, None)
            A DataFrame containing the exact y-values corresponding to all the sampled inputs. If None,
            it is not included on the plots.
        y_new_exact : Union(DataFrame, None)
            A DataFrame containing the exact y-values corresponding to the most recently sampled inputs. If None,
            it is not included on the plots.
        *args
            Extra arguments should be passed as keyword arguments
        **kwargs
            Extra keyword arguments to the pairplot function of sns
        """
        pairwise_array = pd.concat([x.assign(Sample_Delimiters='Full Training Set'),
                                    x_new.assign(Sample_Delimiters='New Training Points')])
        if y_exact is not None and y_new_exact is not None:
            full_ys = pd.concat([y_exact,
                                 y_new_exact])
            pairwise_array = pd.concat([pairwise_array, full_ys], axis=1)

        plot = sns.pairplot(pairwise_array, hue='Sample_Delimiters', markers=["o", "s"], diag_kind='hist', **kwargs)
        plt.savefig(path)
        plt.close()

    @staticmethod
    def pred_vs_actual(path, x, x_new, y_preds_df, y_exact, y_new_exact, *args, **kwargs):
        """
        A plotting method to generate and save a predicted_vs_actual_plot using the seaborn interface

        Parameters
        ----------
        path : str
            The path where to save the file, including the filename and file extension.
        x : DataFrame
            A DataFrame containing all the sampled input values
        x_new : DataFrame
            A DataFrame containing the most recently sampled input values
        y_preds_df : DataFrame
            A DataFrame containing the predicted y-values for all the sampled input values
        y_exact : DataFrame
            A DataFrame containing the exact y-values corresponding to all the sampled inputs. If None,
            it is not included on the plots.
        y_new_exact : DataFrame
            A DataFrame containing the exact y-values corresponding to the most recently sampled inputs. If None,
            it is not included on the plots.
        *args
            Extra arguments should be passed as keyword arguments
        **kwargs
            Extra keyword arguments to the pairplot function of sns
        """

        full_ys = pd.concat([y_exact.assign(Sample_Delimiters='Full Training Set'),
                             y_new_exact.assign(Sample_Delimiters='New Training Points')])
        pairwise_array = pd.concat([full_ys, y_preds_df], axis=1)
        pairwise_array.columns = ["Actual", "Predicted"]
        pass



